apply plugin: 'com.android.application'
apply plugin: 'com.jaredsburrows.license'
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: 'com.google.protobuf' // Needed for gRPC

import com.android.build.OutputFile

android {
    compileSdkVersion 33
    defaultConfig {
        applicationId "app.michaelwuensch.bitbanana"
        minSdkVersion 24
        targetSdkVersion 33
        versionCode 50
        versionName "0.6.8"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "bitbanana-" + versionName + "_" + versionCode)
    }
    buildTypes {
        debug {
            // with the following line we can install release and debug version simultaneously
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "BitBanana Debug"
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            resValue "string", "app_name", "BitBanana"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    bundle {
        language {
            // Allows us to further provide multi language support at the expense of a bigger download size
            // All languages will be packed inside each apk.
            enableSplit = false
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        // Needed for Tor library to work when packaged inside .aab
        jniLibs.useLegacyPackaging = true
    }
    namespace 'app.michaelwuensch.bitbanana'
    lint {
        disable 'MissingTranslation', 'MissingQuantity'
    }
}

// Execute this manually
licenseReport {
    generateHtmlReport = false
    generateJsonReport = true
    copyHtmlReportToAssets = false
    copyJsonReportToAssets = false
}

// Copy the licenses file into the res dir if it exists
copy {
    from "$buildDir/reports/licenses/licenseReleaseReport.json"
    into "$projectDir/src/main/res/raw/"
    rename "licenseReleaseReport.json", "license_report.json"
}

//  Needed for gRPC
sourceSets {
    main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}

//  Needed for gRPC
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.13.0"
    }
    plugins {
        javalite { artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0" }
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.57.1'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
            task.plugins {
                grpc {
                    // This will generate the ServiceGrpc
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // QR-Code scanner:
    implementation('com.journeyapps:zxing-android-embedded:4.3.0')

    // QR-Code generator:
    implementation 'com.github.alexzhirkevich:custom-qr-generator:2.0.0-alpha01'

    // Library to restart app
    implementation 'com.jakewharton:process-phoenix:2.1.2'

    // HTTP library to perform API interaction
    implementation "com.squareup.okhttp3:okhttp:4.9.0"

    // Library for the avatar images
    implementation 'com.github.michaelWuensch:avathor-android-library:1.2.0'

    // Expandable floating action button menus
    implementation 'com.nambimobile.widgets:expandable-fab:1.2.1'

    // Tor implementation
    implementation "io.matthewnelson.topl-android:tor-binary:0.4.6.5"
    implementation "io.matthewnelson.topl-android:topl-service:2.1.2"

    // gRPC implementation to communicate with lnd
    implementation 'io.grpc:grpc-okhttp:1.57.1'
    implementation 'io.grpc:grpc-protobuf-lite:1.57.1'
    implementation 'io.grpc:grpc-stub:1.57.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.code.gson:gson:2.9.0'
    compileOnly 'com.google.api.grpc:googleapis-common-protos:0.0.3'

    // Used for base encoding and URI escaping
    implementation 'com.google.guava:guava:29.0-android'

    // Asynchronous programming library
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"

    // Math parser for the stealth mode calculator
    implementation("org.mariuszgromada.math:MathParser.org-mXparser:5.2.1")


    // Basic Android libraries
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.biometric:biometric:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.security:security-crypto:1.1.0-alpha06"
    implementation 'com.google.android.material:material:1.9.0'

    // Libraries for tests
    testImplementation 'org.json:json:20200518'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}